package convert

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"

	"gopkg.in/yaml.v3"
)

// Options controls converter behavior
type Options struct {
	ComposePath string
	OutDir      string
	ChartName   string
	AppVersion  string
	Version     string
}

// GenerateChart reads a compose file and writes a Helm chart to OutDir
func GenerateChart(opts Options) error {
	b, err := ioutil.ReadFile(opts.ComposePath)
	if err != nil {
		return fmt.Errorf("read compose file: %w", err)
	}

	var compose map[string]interface{}
	if err := yaml.Unmarshal(b, &compose); err != nil {
		return fmt.Errorf("parse compose yaml: %w", err)
	}

	servicesRaw, ok := compose["services"]
	if !ok {
		return fmt.Errorf("compose file contains no 'services' key")
	}

	servicesMap, ok := servicesRaw.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected type for 'services' in compose file")
	}

	if err := os.MkdirAll(opts.OutDir, 0755); err != nil {
		return fmt.Errorf("create out dir: %w", err)
	}

	templatesDir := filepath.Join(opts.OutDir, "templates")
	os.MkdirAll(templatesDir, 0755)

	chartYaml := fmt.Sprintf("apiVersion: v2
name: %s
version: %s
appVersion: \"%s\"
", opts.ChartName, opts.Version, opts.AppVersion)
	if err := ioutil.WriteFile(filepath.Join(opts.OutDir, "Chart.yaml"), []byte(chartYaml), 0644); err != nil {
		return fmt.Errorf("write Chart.yaml: %w", err)
	}

	values := map[string]interface{}{"services": map[string]interface{}{}}

	for svcName, svcDefRaw := range servicesMap {
		svcDef, _ := svcDefRaw.(map[string]interface{})
		safeName := sanitizeName(svcName)
		svcValues := map[string]interface{}{}
		if img, ok := svcDef["image"].(string); ok {
			svcValues["image"] = img
		}
		if env, ok := svcDef["environment"]; ok {
			svcValues["environment"] = env
		}
		if ports, ok := svcDef["ports"]; ok {
			svcValues["ports"] = ports
		}
		// default replica
		svcValues["replicaCount"] = 1
		values["services"].(map[string]interface{})[safeName] = svcValues

		// write minimal templates using placeholders
		deployYaml := fmt.Sprintf("apiVersion: apps/v1
kind: Deployment
metadata:
  name: %s-%s
  labels:
    app: %s
spec:
  replicas: {{ .Values.services.%s.replicaCount }}
  selector:
    matchLabels:
      app: %s
  template:
    metadata:
      labels:
        app: %s
    spec:
      containers:
        - name: %s
          image: {{ .Values.services.%s.image }}
", opts.ChartName, safeName, safeName, safeName, safeName, safeName, safeName, safeName)
		ioutil.WriteFile(filepath.Join(templatesDir, safeName+"-deployment.yaml"), []byte(deployYaml), 0644)

		if _, ok := svcValues["ports"]; ok {
			serviceYaml := fmt.Sprintf("apiVersion: v1
kind: Service
metadata:
  name: %s-%s
  labels:
    app: %s
spec:
  selector:
    app: %s
  ports:
  - port: 80
    targetPort: 80
", opts.ChartName, safeName, safeName, safeName)
			ioutil.WriteFile(filepath.Join(templatesDir, safeName+"-service.yaml"), []byte(serviceYaml), 0644)
		}
	}

	valBytes, _ := yaml.Marshal(values)
	ioutil.WriteFile(filepath.Join(opts.OutDir, "values.yaml"), valBytes, 0644)

	helpers, _ := ioutil.ReadFile("templates/_helpers.tpl")
	ioutil.WriteFile(filepath.Join(templatesDir, "_helpers.tpl"), helpers, 0644)

	notes := "Generated by helm-compose-plugin. Review values.yaml and templates before deploying.
"
	ioutil.WriteFile(filepath.Join(templatesDir, "NOTES.txt"), []byte(notes), 0644)

	return nil
}

func sanitizeName(s string) string {
	// basic sanitizer: lowercase and replace non-alnum with '-'
	out := ""
	for _, r := range s {
		if (r >= 'a' && r <= 'z') || (r >= '0' && r <= '9') {
			out += string(r)
		} else if r >= 'A' && r <= 'Z' {
			out += string(r + ('a' - 'A'))
		} else {
			out += "-"
		}
	}
	return out
}